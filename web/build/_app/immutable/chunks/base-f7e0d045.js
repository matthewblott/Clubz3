import{g as f,P as _,s as p,a as h}from"./utils-020dbbd6.js";const b="http",a=`${b}://${f()}/api/v2/${_}`,s={};new Headers({"Content-Type":"application/json"});const u=async(e,t,r)=>{let n;p.subscribe(d=>{n=d});const l=new Headers({"Content-Type":"application/json","X-DreamFactory-API-Key":h,"X-DreamFactory-Session-Token":n.session_token});let o;if(r===void 0||r===""?o=await fetch(e,{method:t,headers:l}):o=await fetch(e,{method:t,headers:l,body:r}),!o.ok)throw new Error(o.statusText);return o.json()},c=async e=>u(e,"GET"),$=async(e,t)=>u(e,"POST",t),i=async(e,t)=>u(e,"PUT",t),y=async e=>u(e,"DELETE");s.fetchAll=async e=>{const t=`${a}/_table/${e}`;return c(t)};s.fetchDistinct=async(e,t)=>{const r=`${a}/_table/${e}?fields=${t}&group=${t}&filter=${t} is not null`;return c(r)};s.fetchPaged=async(e,t,r)=>{const n=`${a}/_table/${e}?limit=${t}&offset=${r}&include_count=true`;return c(n)};s.fetchFiltered=async(e,t)=>{const r=`${a}/_table/${e}?filter=${t}`;return c(r)};s.fetchFilteredPaged=async(e,t,r,n)=>{const l=`${a}/_table/${e}?limit=${t}&offset=${r}&include_count=true&filter=${n}`;return c(l)};s.fetchById=async(e,t)=>{const r=`${a}/_table/${e}/${t}`;return c(r)};s.create=async(e,t)=>{const r=`${a}/_table/${e}`;return $(r,t)};s.createByFields=async(e,t,r)=>{const n=`${a}/_table/${e}?id_field=${t}`;return $(n,r)};s.updateById=async(e,t,r)=>{const n=`${a}/_table/${e}/${t}`;return i(n,r)};s.update=async(e,t,r)=>await s.updateById(e,t,r);s.updateByFields=async(e,t,r)=>{r=r.replace(":true",":1");const n=`${a}/_table/${e}?id_field=${t}`;return i(n,r)};s.remove=async(e,t)=>{const r=`${a}/_table/${e}/${t}`;return y(r)};s.removeByFilter=async(e,t)=>{const r=`${a}/_table/${e}?filter=${t}`;return y(r)};export{s as B};
